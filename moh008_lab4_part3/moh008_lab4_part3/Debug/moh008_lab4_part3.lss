
moh008_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089a  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b1  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000429  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	41 d0       	rcall	.+130    	; 0x12c <main>
  aa:	4f c0       	rjmp	.+158    	; 0x14a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick_SM_B>:
unsigned char tmpB = 0x00;
void Tick_SM_B();

void Tick_SM_B()
{
	switch(state)
  ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	71 f0       	breq	.+28     	; 0xd2 <Tick_SM_B+0x24>
  b6:	28 f0       	brcs	.+10     	; 0xc2 <Tick_SM_B+0x14>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	e9 f0       	breq	.+58     	; 0xf6 <Tick_SM_B+0x48>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	31 f1       	breq	.+76     	; 0x10c <Tick_SM_B+0x5e>
  c0:	2c c0       	rjmp	.+88     	; 0x11a <Tick_SM_B+0x6c>
	{
		case Locked:
		if(A == 0x04)
  c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <A>
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	51 f5       	brne	.+84     	; 0x11e <Tick_SM_B+0x70>
		{
			state = prsd;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  d0:	08 95       	ret
			state = Locked;
		}
		break;
		
		case prsd:
		if(A == 0x02)
  d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <A>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	19 f4       	brne	.+6      	; 0xe0 <Tick_SM_B+0x32>
		{
			state = Locked;
  da:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
  de:	1f c0       	rjmp	.+62     	; 0x11e <Tick_SM_B+0x70>
		}
		else if(A == 0x00)
  e0:	81 11       	cpse	r24, r1
  e2:	04 c0       	rjmp	.+8      	; 0xec <Tick_SM_B+0x3e>
		{
			state = rlsd;
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  ea:	08 95       	ret
		}
		else if(A == 0x04)
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	e9 f0       	breq	.+58     	; 0x12a <Tick_SM_B+0x7c>
		{
			state = prsd;
		}
		else
		{
			state = Locked;
  f0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
  f4:	14 c0       	rjmp	.+40     	; 0x11e <Tick_SM_B+0x70>
		}
		break;
		
		case rlsd:
		if(A == 0x02)
  f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <A>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	21 f4       	brne	.+8      	; 0x106 <Tick_SM_B+0x58>
		{
			state = Unlocked;
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 104:	0f c0       	rjmp	.+30     	; 0x124 <Tick_SM_B+0x76>
		}
		else
		{
			state = Locked;
 106:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 10a:	09 c0       	rjmp	.+18     	; 0x11e <Tick_SM_B+0x70>
		}
		break;
		
		case Unlocked:
		if(A == 0x80)
 10c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <A>
 110:	80 38       	cpi	r24, 0x80	; 128
 112:	41 f4       	brne	.+16     	; 0x124 <Tick_SM_B+0x76>
		{
			state = Locked;
 114:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 118:	02 c0       	rjmp	.+4      	; 0x11e <Tick_SM_B+0x70>
			state = Unlocked;
		}
		break;
		
		default:
		state = Locked;
 11a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
		break;
	}
	switch(state)
	{
		case Locked:
		tmpB = 0x00;
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		break;
 122:	08 95       	ret
		
		case rlsd:
		break;
		
		case Unlocked:
		tmpB = 0x01;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 12a:	08 95       	ret

0000012c <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 12c:	11 b8       	out	0x01, r1	; 1
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 132:	84 b9       	out	0x04, r24	; 4
 134:	15 b8       	out	0x05, r1	; 5
	
	state = Locked;
 136:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
	/* Replace with your application code */
	while (1)
	{
		A = PINA;
 13a:	80 b1       	in	r24, 0x00	; 0
 13c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <A>
		Tick_SM_B();
 140:	b6 df       	rcall	.-148    	; 0xae <Tick_SM_B>
		PORTB = tmpB;
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 146:	85 b9       	out	0x05, r24	; 5
 148:	f8 cf       	rjmp	.-16     	; 0x13a <main+0xe>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
